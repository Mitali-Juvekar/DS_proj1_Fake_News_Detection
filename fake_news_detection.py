# -*- coding: utf-8 -*-
"""Fake_News_Detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1au-tk_LENs9KtKSFLql6xH413iwaR3tZ

Import libraries
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

"""Data Preprocessing"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io
 
df = pd.read_csv(io.BytesIO(uploaded['train.csv']))
print(df)

df.shape

df.head()

"""1:  fake news

0:  real news
"""

df.isnull().sum()

# replacing null values with string
df = df.fillna('')

# creating a new column combining author and title
df['content'] = df['author']+' '+df['title']

print(df['content'])

X = df.drop(['label'], axis=1)

Y = df['label']

print(X)
print(Y)

port_stem = PorterStemmer()

# stemming
def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]', ' ', content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

df['content'] = df['content'].apply(stemming)

print(df['content'])

X= df['content'].values
Y = df['label'].values

print(X)
print(Y)

X.shape
Y.shape

vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

# splitting the dataset 

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 2)

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Model Evaluation"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print("Accuracy score: ", training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print("Accuracy score of test data: ", test_data_accuracy)

